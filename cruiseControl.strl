module CruiseStateController:
	%type CruiseStates = enum {OFF, ON, STANDBY, DISABLED};

	input signalOn, signalOff, acceleratorPressed, acceleratorReleased, brakesPressed, brakesReleased, speedValid, speedInvalid;
   
	output CruiseState: integer;


	var currentState := 1: integer in
		loop
			trap TrapState in
				if currentState = 1 then
					% OFF -> ON
					present signalOn then
						currentState := 2;
						exit TrapState;
					end present;


				elsif currentState = 2 then
					% ON -> OFF
					present signalOff then
						currentState := 1;
						exit TrapState;
					end present;

					% ON -> STANDBY
					present brakesPressed then
						currentState := 3;
						exit TrapState;
					end present;

					% ON -> DISABLED
					present (speedInvalid and acceleratorPressed) then
						currentState := 4;	
						exit TrapState;
					end present;


				elsif currentState = 3 then
					% STANDYBY -> OFF
					present signalOff then
						currentState := 1;
						exit TrapState;
					end present;
					
					% STANDBY -> ON
					present (speedValid and acceleratorReleased) then
						currentState := 2;
						exit TrapState;
					end present;

					% STANDYBY -> DISABLED
					present (speedInvalid and acceleratorPressed) then
						currentState := 4;
						exit TrapState;
					end present;


				elsif currentState = 4 then
					% DISBALED -> OFF
					present signalOff then 
						currentState := 1;
						exit TrapState;
					end present;

					% DISABLED -> ON
					present (speedValid and acceleratorReleased) then
						currentState := 2;
						exit TrapState;
					end present;

					% DISBALED -> STANDBY
					present brakesPressed then
						currentState := 3;
						exit TrapState;
					end present;
				end if;
			end trap;
			emit CruiseState(currentState);
		    pause;
		end loop;
	end var;
end module


module CruiseSpeedManager:
	constant INCREMENT, DECREMENT: float;

	input set, quickAccel, quickDecel, speedValid, cruiseSpeedValid;
	input speed: float;
	input state: integer;
	output newCruiseSpeed: float;

	var cruiseSpeed := ?speed: float in
		loop
			trap Config in
				if ?state = 1 then
					exit Config;
				end if;

				% Assuming config signals will not be pressed at the same time (like brakes and pedals)
				present (set and speedValid) then
					cruiseSpeed := ?speed;
					exit Config;
				end present;

				present (quickAccel and cruiseSpeedValid) then
					cruiseSpeed := cruiseSpeed + INCREMENT;
					exit Config;
				end present;

				present (quickDecel and cruiseSpeedValid) then
					cruiseSpeed := cruiseSpeed - DECREMENT;
					exit Config;
				end present;



			end trap;
			emit newCruiseSpeed(cruiseSpeed);
		    pause;
		end loop;
	end var;
end module


module MonitorAccelDecel:
    constant MIN_PEDAL : float;

    input monitor_accel : float, monitor_brake : float;
    output accel_pressed, accel_released, brake_pressed, brake_released;
    
    loop
        if (?monitor_accel > MIN_PEDAL) then
            emit accel_pressed;
        else
            emit accel_released;
        end if;

        if (?monitor_brake > MIN_PEDAL) then
            emit brake_pressed;
        else
            emit brake_released;
        end if;
	pause;
    end loop;
end module


module CheckCruiseSpeed:
    constant MIN_SPEED : float;
    constant MAX_SPEED : float;

    input cruiseSpeed : float;
    output cruiseSpeedMax, cruiseSpeedMin, cruiseSpeedValid;

    loop
        if ?cruiseSpeed <= MIN_SPEED then 
            emit cruiseSpeedMin; 

		elsif ?cruiseSpeed >= MAX_SPEED then 
		    emit cruiseSpeedMax; 

		else 
			emit cruiseSpeedValid;
		end if;

	pause;
    end loop;
end module

module ValidateSpeed:
    constant MIN_SPEED : float;
    constant MAX_SPEED : float;

    input validate_speed : float;
    output valid_speed, invalid_speed;

    loop
        if (?validate_speed > MIN_SPEED and ?validate_speed < MAX_SPEED) then
            emit valid_speed; 
        else
            emit invalid_speed;
        end if;
	pause;
    end loop;
end module


module CruiseThrottleRegulator:
	loop
		pause;
	end loop;
end module


module cruiseControler:
	loop
		pause;
	end loop;
end module
