module CruiseStateController:
	%type CruiseStates = enum {OFF, ON, STANDBY, DISABLED};

	input signalOn, signalOff, signalResume, acceleratorPressed, acceleratorReleased, brakesPressed, brakesReleased, speedValid, speedInvalid;
   
	output initCS, CruiseState: integer;


	var currentState := 1: integer in
		loop
			trap TrapState in
				if currentState = 1 then
					% OFF -> ON
					present signalOn then
						currentState := 2;
						emit initCS;
						exit TrapState;
					end present;


				elsif currentState = 2 then
					% ON -> OFF
					present signalOff then
						currentState := 1;
						exit TrapState;
					end present;

					% ON -> STANDBY
					present brakesPressed then
						currentState := 3;
						exit TrapState;
					end present;

					% ON -> DISABLED
					present (speedInvalid or acceleratorPressed) then
						currentState := 4;	
						exit TrapState;
					end present;


				elsif currentState = 3 then
					% STANDYBY -> OFF
					present signalOff then
						currentState := 1;
						exit TrapState;
					end present;
					
					% STANDBY -> ON
					present (speedValid and acceleratorReleased and signalResume) then
						currentState := 2;
						exit TrapState;
					end present;

					% STANDYBY -> DISABLED
					present (speedInvalid or acceleratorPressed and signalResume) then
						currentState := 4;
						exit TrapState;
					end present;


				elsif currentState = 4 then
					% DISBALED -> OFF
					present signalOff then 
						currentState := 1;
						exit TrapState;
					end present;

					% DISABLED -> ON
					present (speedValid and acceleratorReleased) then
						currentState := 2;
						exit TrapState;
					end present;

					% DISBALED -> STANDBY
					present brakesPressed then
						currentState := 3;
						exit TrapState;
					end present;
				end if;
			end trap;
			emit CruiseState(currentState);
		    pause;
		end loop;
	end var;
end module


module CruiseSpeedManager:
	constant INCREMENT = 2.5f: float, DECREMENT = 2.5f: float;
	constant MIN_SPEED = 30.0f : float, MAX_SPEED = 150.0f: float;

	input set1, quickAccel, quickDecel, speedValid, initCS, cruiseSpeedMin, cruiseSpeedMax;
	input speed1: float;
	input state: integer;
	output newCruiseSpeed: float;

	var cruiseSpeed1 := 0.0f: float in
		loop
			trap Config in
				present (initCS) then
					present (speedValid) then
						cruiseSpeed1 := ?speed1;
						exit Config
					end present;

					if (?speed1 > MAX_SPEED) then
						cruiseSpeed1 := MAX_SPEED; 
						exit Config;
					elsif (?speed1 < MIN_SPEED) then
						cruiseSpeed1 := MIN_SPEED; 
						exit Config;
					end if;
					exit Config;
				end present;

				if ?state = 1 then
					exit Config;
				end if;

				% Assuming config signals will not be pressed at the same time (like brakes and pedals)
				present (set1 and speedValid) then
					cruiseSpeed1 := ?speed1;
					exit Config;
				end present;

				present (quickAccel and not cruiseSpeedMax) then
					cruiseSpeed1 := cruiseSpeed1 + INCREMENT;
					exit Config;
				end present;

				present (quickDecel and not cruiseSpeedMin) then
					cruiseSpeed1 := cruiseSpeed1 - DECREMENT;
					exit Config;
				end present;



			end trap;
			emit newCruiseSpeed(cruiseSpeed1);
		    pause;
		end loop;
	end var;
end module


module MonitorAccelDecel:
    constant MIN_PEDAL = 3.0f : float;

    input monitor_accel : float, monitor_brake : float;
    output accel_pressed, accel_released, brake_pressed, brake_released;
    
    loop
        if (?monitor_accel > MIN_PEDAL) then
            emit accel_pressed;
        else
            emit accel_released;
        end if;

        if (?monitor_brake > MIN_PEDAL) then
            emit brake_pressed;
        else
            emit brake_released;
        end if;
	pause;
    end loop;
end module


module CheckCruiseSpeed:
    constant MIN_SPEED = 30.0f : float;
    constant MAX_SPEED = 150.0f: float;
	constant INCREMENT = 2.5f: float, DECREMENT = 2.5f: float;

    input cruiseSpeed1 : float;
    output cruiseSpeedMax, cruiseSpeedMin;

    loop
        if pre(?cruiseSpeed1)-DECREMENT < MIN_SPEED then 
            emit cruiseSpeedMin; 

		elsif pre(?cruiseSpeed1)+INCREMENT > MAX_SPEED then 
		    emit cruiseSpeedMax; 
		end if;

	pause;
    end loop;
end module

module ValidateSpeed:
    constant MIN_SPEED = 30.0f : float;
    constant MAX_SPEED = 150.0f: float;

    input validate_speed : float;
    output valid_speed, invalid_speed;

    loop
        if (?validate_speed >= MIN_SPEED and ?validate_speed <= MAX_SPEED) then
            emit valid_speed; 
        else
            emit invalid_speed;
        end if;
	pause;
    end loop;
end module


module CruiseThrottleRegulator:
	function regulateThrottle(integer, float, float): float;	
	input CTRCruiseState: integer, CTRCruiseSpeed: float, CTRSpeed: float, CTRAccel: float;
	output CTRThrottleCmd: float;
	var isOn := false : boolean in
		loop
			present (CTRCruiseState) then
				if (?CTRCruiseState = 2) then
					isOn := true;
				else
					isOn := false;

				end if;
			end present;
			
			if (isOn) then
				if (?CTRCruiseState = 2 and pre(?CTRCruiseState) = 1) then
					emit CTRThrottleCmd(regulateThrottle(1, ?CTRCruiseSpeed, ?CTRSpeed));
				else 
					emit CTRThrottleCmd(regulateThrottle(0, ?CTRCruiseSpeed, ?CTRSpeed));
				end if; 
			else
				emit CTRThrottleCmd(?CTRAccel);
			end if;
			pause;
		end loop;
	end var;
end module


module cruiseControler:

	input on, off, resume, set, qAccel, qDecel;
	input brake:=0.0f: float, speed:=0.0f: float, accel:=0.0f: float;
	output cruiseState: integer, cruiseSpeed: float, throttleCmd: float;

	signal accelP, accelR, brakesP, brakesR, speedV, speedI, csMax, csMin, init in

	run CruiseStateController [signal on/signalOn, off/signalOff, resume/signalResume, accelP/acceleratorPressed, accelR/acceleratorReleased, brakesP/brakesPressed, brakesR/brakesReleased, speedV/speedValid, speedI/speedInvalid, cruiseState/CruiseState, init/initCS]
	
	||

	run CruiseSpeedManager [signal set/set1, qAccel/quickAccel, qDecel/quickDecel, speedV/speedValid, csMin/cruiseSpeedMin, csMax/cruiseSpeedMax, speed/speed1, cruiseState/state, init/initCS, cruiseSpeed/newCruiseSpeed]

	||

	run MonitorAccelDecel [signal accel/monitor_accel, brake/monitor_brake, accelP/accel_pressed, accelR/accel_released, brakesP/brake_pressed, brakesR/brake_released]

	||
	
	run CheckCruiseSpeed [signal cruiseSpeed/cruiseSpeed1, csMin/cruiseSpeedMin, csMax/cruiseSpeedMax]

	|| 

	run ValidateSpeed [signal speed/validate_speed, speedV/valid_speed, speedI/invalid_speed]

	||

	run CruiseThrottleRegulator[signal cruiseState/CTRCruiseState, cruiseSpeed/CTRCruiseSpeed, speed/CTRSpeed, accel/CTRAccel, throttleCmd/CTRThrottleCmd]
end.
